---
- block:
  - name: Login to oVirt
    ovirt_auth:
      url: "{{ engine_url }}"
      username: "{{ engine_user }}"
      password: "{{ engine_password }}"
      ca_file: "{{ engine_cafile | default(omit) }}"
      insecure: "{{ engine_insecure | default(true) }}"
    when: ovirt_auth is undefined
    register: loggedin
    tags:
      - always

  - name: Get hosts
    ovirt_hosts_facts:
      auth: "{{ ovirt_auth }}"
      pattern: "cluster={{ cluster_name | mandatory }} update_available=true {{ host_names | map('regex_replace', '(.*)', 'name=\\1') | list | join(' or ') }} {{ host_statuses | map('regex_replace', '(.*)', 'status=\\1') | list | join(' or ') }}"
  
  - name: Check if there are hosts to be updated
    debug:
      msg: "No hosts to be updated"
    when: ovirt_hosts | length == 0
  
  - block:
    - name: Init failed_host_names and succeed_host_names list
      set_fact:
        failed_host_names: []
        succeed_host_names: []

    - name: Get cluster facts
      ovirt_clusters_facts:
        auth: "{{ ovirt_auth }}"
        pattern: "name={{ cluster_name }}"
  
    - name: Get name of the original scheduling policy
      ovirt_scheduling_policies_facts:
        auth: "{{ ovirt_auth }}"
        id: "{{ ovirt_clusters[0].scheduling_policy.id }}"
  
    - name: Remember the cluster scheduling policy
      set_fact:
        cluster_scheduling_policy: "{{ ovirt_scheduling_policies[0].name }}"
  
    - name: Get list of VMs in cluster
      ovirt_vms_facts:
        auth: "{{ ovirt_auth }}"
        pattern: "cluster={{ cluster_name }}"
  
    - name: Set in cluster upgrade policy
      ovirt_clusters:
        auth: "{{ ovirt_auth }}"
        name: "{{ cluster_name }}"
        scheduling_policy: ClusterInMaintenance
  
    - name: Shutdown VMs which can be stopped
      ovirt_vms:
        auth: "{{ ovirt_auth }}"
        state: stopped
        name: "{{ item }}"
        force: true
      with_items:
        - "{{ stopped_vms | default([]) }}"
  
    - include: pinned_vms.yml
  
    # Update only those hosts that aren't in list of hosts were VMs are pinned
    # or if stop_pinned_to_host_vms is enabled, which means we stop pinned VMs
    - include: upgrade.yml
      with_items:
        - "{{ ovirt_hosts }}"
      when: "item.id not in host_ids or stop_pinned_to_host_vms"

    when: ovirt_hosts | length > 0
    always:
      - name: Set original cluster policy
        ovirt_clusters:
          auth: "{{ ovirt_auth }}"
          name: "{{ cluster_name }}"
          scheduling_policy: "{{ cluster_scheduling_policy }}"
  
      - name: Start again stopped VMs
        ovirt_vms:
          auth: "{{ ovirt_auth }}"
          name: "{{ item }}"
        with_items:
          - "{{ stopped_vms | default([]) }}"
  
      - name: Start again pin to host VMs
        ovirt_vms:
          auth: "{{ ovirt_auth }}"
          name: "{{ item }}"
        with_items:
          - "{{ pinned_vms_names | default([]) }}"
        when: "stop_pinned_to_host_vms"
  
      - name: Print info about host which was updated
        debug:
          msg: "Following hosts was successfully updated: {{ succeed_host_names }}"
        when: "succeed_host_names | length > 0"

      - name: Fail the playbook, if some hosts wasn't updated
        fail:
          msg: "The cluster upgrade failed. Hosts {{ failed_host_names }} wasn't updated."
        when: "failed_host_names | length > 0"

  always:
    - name: Logout from oVirt
      ovirt_auth:
        state: absent
        ovirt_auth: "{{ ovirt_auth }}"
      when: not loggedin.skipped | default(false)
      tags:
        - always
